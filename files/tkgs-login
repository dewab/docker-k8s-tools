#!/usr/bin/env bash

set -euo pipefail

# ----- Verify required commands are in PATH -----
for cmd in kubectl kubectl-vsphere tanzu yq; do
    if ! command -v "$cmd" &> /dev/null; then
        echo "Error: '$cmd' is not in your PATH. Please install or add it to your PATH." >&2
        exit 1
    fi
done

# ----- Default variables -----
configFile=""
genericPassword=""
insecureFlag=""
verbose=false
kubeconfigArg=""

# ----- Help screen -----
showHelp() {
    cat <<EOF
Usage: $(basename "$0") [options]

Options:
  -c, --config <file>      Path to config YAML file (overrides all other locations)
  -p, --password <pass>    Password for all supervisors (overrides config/env)
  -i, --insecure           Skip TLS verification (overrides config file)
  -k, --kubeconfig <file>  Set KUBECONFIG to the specified file
  -v, --verbose            Show detailed output
  -e, --example            Show example config file and exit
  -h, --help               Show this help message and exit

Config file search order:
  1. Command line -c/--config option
  2. ./tkgs-login-config.yaml (current directory)
  3. \$XDG_CONFIG_HOME/tkgs-login/config.yaml
  4. \$HOME/.tkgs-login.conf

Environment:
  KUBECTL_VSPHERE_PASSWORD If set, used as the password unless overridden
EOF
}

# ----- Example Config -----
showExample() {
    cat <<'EOF'

Sample config file (YAML):

supervisors:
  - name: "supervisor1.example.com"        # (required) Supervisor endpoint
    username: "administrator@vsphere.local" # (required) Username for login
    password: "your-password"               # (optional) Password (can also be provided via CLI or env)
    insecure: true                          # (optional) Set to true to skip TLS verification
    workloads:
      - namespace: "namespace1"             # (required) Namespace for workload clusters
        clusters:
          - "cluster1"                      # (required) Cluster name(s)
          - "cluster2"
      - namespace: "namespace2"
        clusters:
          - "cluster3"
  - name: "supervisor2.example.com"
    username: "admin@vsphere.local"
    # password: "another-password"          # (optional)
    # insecure: false                       # (optional, defaults to false)
    workloads:
      - namespace: "namespace3"
        clusters:
          - "cluster4"

EOF
}

# ----- Parse command line options -----
while [[ $# -gt 0 ]]; do
    case "$1" in
        -c|--config)
            configFile="$2"
            shift 2
            ;;
        -p|--password)
            genericPassword="$2"
            shift 2
            ;;
        -i|--insecure)
            insecureFlag="--insecure-skip-tls-verify"
            shift
            ;;
        -k|--kubeconfig)
            kubeconfigArg="--kubeconfig $2"
            shift 2
            ;;
        -v|--verbose)
            verbose=true
            shift
            ;;
        -e|--example)
            showExample
            exit 0
            ;;
        -h|--help)
            showHelp
            exit 0
            ;;
        *)
            break
            ;;
    esac
done

# ----- Config file search order -----
if [[ -z "$configFile" || ! -f "$configFile" ]]; then
    echo "Error: Config file not found in any expected location." >&2
    echo
    echo "You may create a config file in one of these locations:"
    echo "  - ./tkgs-login-config.yaml (current directory)"
    echo "  - \$XDG_CONFIG_HOME/tkgs-login/config.yaml"
    echo "  - \$HOME/.tkgs-login.conf"
    showExample
    exit 1
fi

echo "[INFO] Using config file: $configFile"

# ----- Helper: run command with optional verbosity -----
runCmd() {
    local cmd="$1"
    if $verbose; then
        eval "$cmd"
    else
        eval "$cmd" >/dev/null 2>&1
    fi
}

# ----- Main login loop -----
supervisorKeys=$(yq e '.supervisors | keys | .[]' "$configFile")
for supervisorIndex in $supervisorKeys; do
    supervisorBlock=$(yq e ".supervisors[$supervisorIndex]" "$configFile")
    supervisorServer=$(echo "$supervisorBlock" | yq e '.name' -)
    supervisorUser=$(echo "$supervisorBlock" | yq e '.username' -)
    yamlPassword=$(echo "$supervisorBlock" | yq e '.password' -)
    yamlInsecure=$(echo "$supervisorBlock" | yq e '.insecure' -)

    # Use CLI --insecure flag if set, otherwise use YAML
    effectiveInsecureFlag="$insecureFlag"
    [[ -z "$effectiveInsecureFlag" && "$yamlInsecure" == "true" ]] && effectiveInsecureFlag="--insecure-skip-tls-verify"

    # Determine password to use (CLI > YAML)
    if [[ -n "$genericPassword" ]]; then
        export KUBECTL_VSPHERE_PASSWORD="$genericPassword"
    elif [[ -n "$yamlPassword" && "$yamlPassword" != "null" ]]; then
        export KUBECTL_VSPHERE_PASSWORD="$yamlPassword"
    fi

    echo "----------------------------------------"
    echo "➡️  Logging into Supervisor: $supervisorServer as $supervisorUser"

    loginCmd="kubectl vsphere login --vsphere-username \"$supervisorUser\" --server \"$supervisorServer\" $effectiveInsecureFlag $kubeconfigArg"
    if ! runCmd "$loginCmd"; then
        echo "ERROR: Failed to login to Supervisor $supervisorServer as $supervisorUser" >&2
        exit 1
    fi

    # Get workload keys for this supervisor
    workloadKeys=$(yq e ".supervisors[$supervisorIndex].workloads | keys | .[]" "$configFile" 2>/dev/null || true)
    if [[ -z "$workloadKeys" ]]; then
        echo "⚠️  No workloads defined for Supervisor $supervisorServer — skipping clusters."
        echo "----------------------------------------"
        continue
    fi

    # Loop through workloads and clusters
    for workloadIndex in $workloadKeys; do
        workloadBlock=$(yq e ".supervisors[$supervisorIndex].workloads[$workloadIndex]" "$configFile")
        workloadNamespace=$(echo "$workloadBlock" | yq e '.namespace' -)

        clusterKeys=$(echo "$workloadBlock" | yq e '.clusters | keys | .[]' -)
        for clusterIndex in $clusterKeys; do
            clusterName=$(echo "$workloadBlock" | yq e ".clusters[$clusterIndex]" -)
            echo "➡️  Logging into cluster: $clusterName (namespace: $workloadNamespace)"

            kubeconfigCmd="tanzu cluster kubeconfig get \"$clusterName\" -n \"$workloadNamespace\" --admin $kubeconfigArg"
            if ! runCmd "$kubeconfigCmd"; then
                echo "ERROR: Failed to get kubeconfig for cluster $clusterName in namespace $workloadNamespace" >&2
            fi
        done
    done

    echo "----------------------------------------"
done
