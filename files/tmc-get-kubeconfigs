#!/usr/bin/env bash

set -euo pipefail

# ----- Handle completion -----
if [[ "${1:-}" == "completion" ]]; then
  case "${2:-}" in
    zsh)
      cat <<'EOF'
# Zsh completion for tmc-get-kubeconfigs
_tmc_get_kubeconfigs_completions() {
  local state line
  _arguments -C \
    '--split[Save each kubeconfig to a separate file]' \
    '-s[Save each kubeconfig to a separate file]' \
    '--directory=[Destination directory for kubeconfigs]:directory:_files -/' \
    '-d=[Destination directory for kubeconfigs]:directory:_files -/' \
    '--kubeconfig=[Path to kubeconfig file]:file:_files' \
    '-k=[Path to kubeconfig file]:file:_files' \
    '--no-backup[Do not back up existing kubeconfig]' \
    '--help[Show help]' \
    '-h[Show help]'
}
compdef _tmc_get_kubeconfigs_completions tmc-get-kubeconfigs
EOF
      ;;
    bash)
      cat <<'EOF'
# Bash completion for tmc-get-kubeconfigs
_tmc_get_kubeconfigs_completions() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="--split -s --directory -d --kubeconfig -k --no-backup --help -h"

  case "$prev" in
    -k|--kubeconfig)
      COMPREPLY=( $(compgen -f -- "$cur") )
      return 0
      ;;
    -d|--directory)
      COMPREPLY=( $(compgen -d -- "$cur") )
      return 0
      ;;
  esac

  COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
  return 0
}
complete -F _tmc_get_kubeconfigs_completions tmc-get-kubeconfigs
EOF
      ;;
    fish)
      cat <<'EOF'
# Fish completion for tmc-get-kubeconfigs
complete -c tmc-get-kubeconfigs -l split -s s -d "Save each kubeconfig to a separate file"
complete -c tmc-get-kubeconfigs -l directory -s d -r -d "Destination directory for kubeconfigs"
complete -c tmc-get-kubeconfigs -l kubeconfig -s k -r -d "Path to kubeconfig file"
complete -c tmc-get-kubeconfigs -l no-backup -d "Do not back up existing kubeconfig"
complete -c tmc-get-kubeconfigs -l help -s h -d "Show help"
EOF
      ;;
    *)
      echo "Unknown shell for completion: ${2:-}" >&2
      exit 1
      ;;
  esac
  exit 0
fi

# ----- Logging -----
log() { echo "[INFO] $*"; }
err() { echo "[ERROR] $*" >&2; exit 1; }

# ----- Defaults -----
split_mode=false
destination_dir="$HOME/.kube"
kubeconfig_file="$HOME/.kube/config"
skip_backup=false

# ----- Usage -----
usage() {
  cat <<EOF
Usage: $0 [OPTIONS]

Options:
  -s, --split               Save each kubeconfig to a separate file
  -d, --directory DIR       Destination directory for kubeconfigs (default: ~/.kube)
  -k, --kubeconfig FILE     Path to kubeconfig to overwrite/merge into (default: ~/.kube/config)
      --no-backup           Do not back up existing kubeconfig
  -h, --help                Show this help message

Commands:
  completion zsh            Output Zsh completion script
  completion bash           Output Bash completion script
  completion fish           Output Fish completion script

Examples:
  $0                       # Merge all TMC kubeconfigs into ~/.kube/config
  $0 -s                    # Split each kubeconfig to ~/.kube/kubeconfig-<context>.yaml
  $0 -s -d /custom/path    # Split to /custom/path
  $0 -k /my/config         # Merge into a custom kubeconfig file
EOF
}

# ----- Parse Arguments -----
while [[ $# -gt 0 ]]; do
  case "$1" in
    -s|--split) split_mode=true; shift ;;
    -d|--directory)
      destination_dir="${2:-}"
      [[ -z "$destination_dir" ]] && err "Missing value for --directory"
      shift 2 ;;
    -k|--kubeconfig)
      kubeconfig_file="${2:-}"
      [[ -z "$kubeconfig_file" ]] && err "Missing value for --kubeconfig"
      shift 2 ;;
    --no-backup) skip_backup=true; shift ;;
    -h|--help) usage; exit 0 ;;
    *) err "Unknown option: $1" ;;
  esac
done

# ----- Check Required Commands -----
for requiredCmd in tanzu kubectl timeout jq; do
  command -v "$requiredCmd" >/dev/null || err "$requiredCmd CLI not found"
done

# ----- Check TMC Login -----
tanzuTmcLoggedIn() {
  local tmcOutput
  tmcOutput=$(timeout 2s tanzu tmc cluster list --output json 2>&1) || true

  if echo "$tmcOutput" | grep -q 'Please open this URL in a browser'; then
    echo "❌ Not logged in to TMC (browser login prompt)"
    return 1
  elif echo "$tmcOutput" | jq -e '.clusters' >/dev/null 2>&1; then
    echo "✅ Logged in to TMC"
    return 0
  elif echo "$tmcOutput" | grep -q 'Timed out'; then
    echo "⚠️ Command timed out — likely hanging on login"
    return 2
  else
    echo "⚠️ Unknown output from TMC CLI:"
    echo "$tmcOutput"
    return 3
  fi
}

# ----- Backup Kubeconfig -----
backupKubeconfig() {
  local kubeconfigFile="$1"
  local backupDir
  backupDir="$(dirname "$kubeconfigFile")/backups"
  mkdir -p "$backupDir"

  if [[ -f "$kubeconfigFile" ]]; then
    local timestamp
    timestamp=$(date +%Y%m%d%H%M%S)
    local backupFile="$backupDir/config.backup.$timestamp"
    cp "$kubeconfigFile" "$backupFile" || err "Backup failed"
    log "Backed up kubeconfig to $backupFile"

    local oldBackups
    mapfile -t oldBackups < <(ls -t "$backupDir"/config.backup.* 2>/dev/null | tail -n +8)
    if (( ${#oldBackups[@]} > 0 )); then
      log "Cleaning up ${#oldBackups[@]} old backup(s)"
      rm -f "${oldBackups[@]}"
    fi
  fi
}

# ----- Merge and Replace Kubeconfig -----
mergeKubeconfigs() {
  local mergedKubeconfig="$workDir/merged-kubeconfig.yaml"
  export KUBECONFIG
  KUBECONFIG=$(printf ":%s" "$workDir"/kubeconfig-*.yaml "$kubeconfig_file" | cut -c2-)

  kubectl config view --flatten > "$mergedKubeconfig" || err "Failed to merge kubeconfigs"
  cp "$mergedKubeconfig" "$kubeconfig_file" || err "Failed to overwrite kubeconfig"
  log "Merged kubeconfig written to $kubeconfig_file"
}

# ----- Main Logic -----
main() {
  tanzuTmcLoggedIn || err "Please log in to Tanzu TMC first."

  mkdir -p "$destination_dir"
  local workDir=""
  [[ "$split_mode" == false ]] && workDir=$(mktemp -d /tmp/tmc-kubeconfigs-XXXXXX) && log "Using temporary directory: $workDir"

  local clusterList
  clusterList=$(tanzu tmc cluster list | tail -n +2) || err "Failed to fetch cluster list"

  while read -r clusterName managementCluster provisioner _; do
    [[ -z "$clusterName" ]] && continue

    if [[ "$split_mode" == true ]]; then
      if tmpFile=$(mktemp "$destination_dir/tmp-kubeconfig-XXXXXX.yaml") &&
         tanzu tmc cluster admin-kubeconfig get -m "$managementCluster" -p "$provisioner" "$clusterName" > "$tmpFile"; then
        local contextName
        contextName=$(KUBECONFIG="$tmpFile" kubectl config current-context)
        local kubeconfigOutFile="$destination_dir/kubeconfig-$contextName.yaml"
        mv "$tmpFile" "$kubeconfigOutFile"
        echo "✅ $clusterName → $kubeconfigOutFile"
      else
        echo "❌ Failed to fetch kubeconfig for $clusterName"
      fi
    else
      local kubeconfigOutFile="$workDir/kubeconfig-${provisioner}-${clusterName}.yaml"
      if tanzu tmc cluster admin-kubeconfig get -m "$managementCluster" -p "$provisioner" "$clusterName" > "$kubeconfigOutFile"; then
        echo "✅ $clusterName → $kubeconfigOutFile"
      else
        echo "❌ Failed to fetch kubeconfig for $clusterName"
      fi
    fi
  done <<< "$clusterList"

  if [[ "$split_mode" != true ]]; then
    [[ "$skip_backup" != true ]] && backupKubeconfig "$kubeconfig_file"
    mergeKubeconfigs
  fi
}

main "$@"
