#!/usr/bin/env bash

set -euo pipefail

# Functions
log() { echo "[INFO] $1"; }
err() { echo "[ERROR] $1" >&2; exit 1; }

# Create a temporary working directory
WORKDIR=$(mktemp -d /tmp/tmc-kubeconfigs-XXXXXX) || err "Failed to create temporary directory"
log "Using temporary directory: $WORKDIR"

# Check for required commands
command -v tanzu >/dev/null || err "tanzu CLI not found"
command -v kubectl >/dev/null || err "kubectl not found"

# Fetch cluster list and skip header line
clusters=$(tanzu tmc cluster list | tail -n +2) || err "Failed to fetch cluster list"

# Generate kubeconfigs
while read -r cluster management_cluster provisioner _; do
  [ -z "$cluster" ] && continue
  kubeconfig_file="$WORKDIR/kubeconfig-${provisioner}-${cluster}.yaml"
  log "Fetching kubeconfig for cluster: $cluster"
  tanzu tmc cluster admin-kubeconfig get -m "$management_cluster" -p "$provisioner" "$cluster" > "$kubeconfig_file" || err "Failed to get kubeconfig for $cluster"
  log "Saved to $kubeconfig_file"
done <<< "$clusters"

# Backup existing kubeconfig
KUBECONFIG_MAIN="$HOME/.kube/config"
mkdir -p "$HOME/.kube"
if [ -f "$KUBECONFIG_MAIN" ]; then
  BACKUP_FILE="$HOME/.kube/config.backup.$(date +%Y%m%d%H%M%S)"
  cp "$KUBECONFIG_MAIN" "$BACKUP_FILE" || err "Failed to back up kubeconfig"
  log "Backed up existing kubeconfig to $BACKUP_FILE"
fi

# Merge kubeconfigs
export KUBECONFIG=$(printf ":%s" $WORKDIR/kubeconfig-*.yaml "$KUBECONFIG_MAIN" | cut -c2-)
MERGED_CONFIG="$WORKDIR/merged-kubeconfig.yaml"
kubectl config view --flatten > "$MERGED_CONFIG" || err "Failed to merge kubeconfigs"
cp "$MERGED_CONFIG" "$KUBECONFIG_MAIN" || err "Failed to overwrite main kubeconfig"
log "Merged kubeconfig saved to $KUBECONFIG_MAIN"
