#!/usr/bin/env bash

set -euo pipefail

# ----- Logging -----
log() { echo "[INFO] $*"; }
err() { echo "[ERROR] $*" >&2; exit 1; }

# ----- Check Required Commands -----
for requiredCmd in tanzu kubectl timeout jq; do
  command -v "$requiredCmd" >/dev/null || err "$requiredCmd CLI not found"
done

# ----- Temporary Working Directory -----
workDir=$(mktemp -d /tmp/tmc-kubeconfigs-XXXXXX) || err "Failed to create temporary directory"
log "Using temporary directory: $workDir"

# ----- Check TMC Login -----
tanzuTmcLoggedIn() {
  local tmcOutput
  tmcOutput=$(timeout 2s tanzu tmc cluster list --output json 2>&1) || true

  if echo "$tmcOutput" | grep -q 'Please open this URL in a browser'; then
    echo "❌ Not logged in to TMC (browser login prompt)"
    return 1
  elif echo "$tmcOutput" | jq -e '.clusters' >/dev/null 2>&1; then
    echo "✅ Logged in to TMC"
    return 0
  elif echo "$tmcOutput" | grep -q 'Timed out'; then
    echo "⚠️ Command timed out — likely hanging on login"
    return 2
  else
    echo "⚠️ Unknown output:"
    echo "$tmcOutput"
    return 3
  fi
}

# ----- Backup Kubeconfig -----
backupKubeconfig() {
  local kubeconfigFile="$HOME/.kube/config"
  local backupDir="$HOME/.kube/backups"
  mkdir -p "$backupDir"

  if [[ -f "$kubeconfigFile" ]]; then
    local timestamp
    timestamp=$(date +%Y%m%d%H%M%S)
    local backupFile="$backupDir/config.backup.$timestamp"
    cp "$kubeconfigFile" "$backupFile" || err "Backup failed"
    log "Backed up kubeconfig to $backupFile"

    # Keep only latest 7 backups
    local oldBackups
    mapfile -t oldBackups < <(ls -t "$backupDir"/config.backup.* 2>/dev/null | tail -n +8)
    if (( ${#oldBackups[@]} > 0 )); then
      log "Cleaning up ${#oldBackups[@]} old backup(s)"
      rm -f "${oldBackups[@]}"
    fi
  fi
}

# ----- Merge and Replace Kubeconfig -----
mergeKubeconfigs() {
  local mergedKubeconfig="$workDir/merged-kubeconfig.yaml"
  export KUBECONFIG
  # Merge all kubeconfigs from workDir and the existing ~/.kube/config
  KUBECONFIG=$(printf ":%s" "$workDir"/kubeconfig-*.yaml "$HOME/.kube/config" | cut -c2-)

  kubectl config view --flatten > "$mergedKubeconfig" || err "Failed to merge kubeconfigs"
  cp "$mergedKubeconfig" "$HOME/.kube/config" || err "Failed to overwrite kubeconfig"
  log "Merged kubeconfig written to ~/.kube/config"
}

# ----- Main Logic -----
main() {
  tanzuTmcLoggedIn || err "Please log in to Tanzu TMC first."

  # Get cluster list, skipping header
  local clusterList
  clusterList=$(tanzu tmc cluster list | tail -n +2) || err "Failed to fetch cluster list"

  # Fetch kubeconfig for each cluster
  while read -r clusterName managementCluster provisioner _; do
    [[ -z "$clusterName" ]] && continue
    local kubeconfigOutFile="$workDir/kubeconfig-${provisioner}-${clusterName}.yaml"
    log "Fetching kubeconfig for $clusterName"
    tanzu tmc cluster admin-kubeconfig get -m "$managementCluster" -p "$provisioner" "$clusterName" > "$kubeconfigOutFile" || err "Failed to fetch kubeconfig for $clusterName"
    log "Saved: $kubeconfigOutFile"
  done <<< "$clusterList"

  backupKubeconfig
  mergeKubeconfigs
}

main "$@"
