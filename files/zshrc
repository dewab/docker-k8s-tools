# ~/.zshrc for Kubernetes CLI Toolkit

# ----- Enable Completion -----
fpath=(/usr/local/share/zsh/site-functions $fpath)
autoload -Uz compinit promptinit
compinit -C
promptinit

# ----- Autosuggestions -----
if [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
  source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
else
  echo "‚ö†Ô∏è zsh-autosuggestions not found, skipping."
fi

# ----- Enable Powerlevel10k -----
# Custom Powerlevel10k segment to show Tanzu context
function prompt_tanzu() {
  local context=$(tanzu context current --short 2>/dev/null | head -n1)
  [[ -z "$context" || "$context" == "There is no active context" ]] && return
  p10k segment -b red -f white -i ‚öô -t "$context"
}

if [ -d /usr/local/share/powerlevel10k ]; then
  POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true
  source /usr/local/share/powerlevel10k/powerlevel10k.zsh-theme
  # ----- Run Powerlevel10k Theme -----
  if [ -f /usr/local/share/powerlevel10k/p10k.zsh ]; then
    source /usr/local/share/powerlevel10k/p10k.zsh
  else
    echo "‚ö†Ô∏è Powerlevel10k theme not found, skipping."
  fi
else
  echo "‚ö†Ô∏è Powerlevel10k theme not found, skipping."
fi


# ----- Color Setup -----
autoload -U colors && colors

# ----- Path -----
export PATH="/k8s/bin:$PATH"

# ----- History -----
export HISTFILE=${HOME}/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000
setopt INC_APPEND_HISTORY HIST_IGNORE_DUPS HIST_REDUCE_BLANKS SHARE_HISTORY

# ----- Aliases -----
alias k=kubectl
alias h=helm
alias t=tanzu
alias l.='exa --list-dirs .* --icons --color-scale'
alias la='exa --classify --icons --color-scale --all'
alias ll='exa --classify --long --icons --color-scale --all'
alias ls='exa --icons --color-scale'

# ----- Tanzu Init Check -----
tanzu_needs_init() {
  local config_yaml="$HOME/.config/tanzu/config.yaml"
  [[ ! -s "$config_yaml" ]] && return 0
  local json=$(jq -c . "$config_yaml" 2>/dev/null)
  [[ "$json" == "{}" ]] && return 0
  return 1
}

# ----- Tanzu Initialization -----
tanzu_init() {
  export TANZU_CLI_CEIP_OPT_IN_PROMPT_ANSWER=No
  echo "üîß Initializing Tanzu plugins..."
  tanzu config eula accept
  local plugin_groups=(
    "vmware-tanzucli/essentials"
    "vmware-tmc/default"
    "vmware-tkg/default"
    "vmware-vsphere/default"
  )
  for group in "${plugin_groups[@]}"; do
    echo "üì¶ Installing plugin group: $group"
    tanzu plugin install all --group "$group" > /dev/null 2>&1
  done
  echo "üéâ Tanzu plugins initialized successfully."
}

# ----- Banner and Hints -----
banner() {
  echo
  cat /banner.txt 2>/dev/null
  echo
  echo "${fg[blue]}Welcome to the Kubernetes CLI Toolkit!${reset_color}"
  echo "${fg[blue]}Tools like kubectl, helm, ytt, kapp, k9s and more are ready to go.${reset_color}"
  echo
  echo "${fg[blue]}The ${fg[yellow]}'H'${fg[blue]} in ${fg[yellow]}Kubernetes${fg[blue]} is short for ${fg[yellow]}'Happiness'${fg[blue]}.${reset_color}"
  echo
}

hints() {
  echo "\n${fg[yellow]}Need help with Tanzu contexts?${reset_color}"
  echo "${fg[cyan]} tanzu tmc context create <context-name> -e <server> -i pinniped${reset_color}"
  echo "${fg[cyan]} tanzu context create <context-name> -e <server> -i pinniped${reset_color}"
  echo
  echo "${fg[yellow]}Login to vSphere Supervisor clusters with:${reset_color}"
  echo "${fg[cyan]} kubectl vsphere login --server <url> --vsphere-username <user> --insecure-skip-tls-verify${reset_color}\n"
  echo
  echo "${fg[yellow]}To quickly and interactively change your kubernetes context:${reset_color}"
  echo "${fg[cyan]} kubectx ${reset_color}"

}

# ----- Run banner and init Tanzu -----
banner
if tanzu_needs_init; then
  tanzu_init
else
  echo "‚ÑπÔ∏è  Tanzu already initialized."
fi
echo "K8s CLI environment loaded. Type 'hints' for usage tips."
echo
